% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TAF.R
\name{taf-reexports}
\alias{taf-reexports}
\alias{tt}
\alias{taf.unzip}
\alias{taf.skeleton}
\alias{os.linux}
\alias{sourceAll}
\alias{clean.library}
\alias{process.entry}
\alias{is.r.package}
\alias{xtab2taf}
\alias{read.taf}
\alias{taf.sources}
\alias{plus}
\alias{taf.bootstrap}
\alias{clean.software}
\alias{process.bibfile}
\alias{os.macos}
\alias{unix2dos}
\alias{os.unix}
\alias{long2taf}
\alias{period}
\alias{taf.boot.path}
\alias{zoom}
\alias{draft.software}
\alias{stamp.description}
\alias{sourceTAF}
\alias{long2xtab}
\alias{taf.session}
\alias{mkdir}
\alias{write.taf}
\alias{parse.repo}
\alias{draft.data}
\alias{sourceDir}
\alias{already.in.taf.library}
\alias{make}
\alias{read.bib}
\alias{tafpng}
\alias{taf.png}
\alias{makeAll}
\alias{rnd}
\alias{ds.package}
\alias{flr2taf}
\alias{download}
\alias{sam2taf}
\alias{xtab2long}
\alias{line.endings}
\alias{taf.data.path}
\alias{latin1.to.utf8}
\alias{get.remote.sha}
\alias{rmdir}
\alias{extract.subdir}
\alias{file.encoding}
\alias{os.windows}
\alias{dos2unix}
\alias{taf.libPaths}
\alias{taf2long}
\alias{clean.data}
\alias{clean}
\alias{zoom.trellis}
\alias{os}
\alias{deps}
\alias{taf.install}
\alias{download.github}
\alias{lim}
\alias{div}
\alias{taf2xtab}
\alias{convert.spaces}
\alias{msg}
\alias{detach.packages}
\alias{cp}
\alias{taf.library}
\alias{utf8.to.latin1}
\alias{ds.file}
\alias{makeTAF}
\title{Functions re-exported from the TAF package}
\usage{
tt(x, column = FALSE)

taf.unzip(zipfile, files = NULL, exdir = ".", unzip = NULL, ...)

taf.skeleton(path = ".", force = FALSE)

os.linux()

sourceAll(...)

clean.library(folder = "bootstrap/library", quiet = FALSE, force = FALSE)

process.entry(bib, quiet = FALSE, force = FALSE, clean = FALSE)

is.r.package(targz, spec = NULL, warn = TRUE)

xtab2taf(x, colname = "Year")

read.taf(file, check.names = FALSE, stringsAsFactors = FALSE,
  fileEncoding = "UTF-8", ...)

taf.sources(type)

plus(x)

taf.bootstrap(software = TRUE, data = TRUE, clean = TRUE,
  force = FALSE, taf = NULL, quiet = FALSE)

clean.software(folder = "bootstrap/software", quiet = FALSE,
  force = FALSE)

process.bibfile(type, clean = TRUE, quiet = FALSE)

os.macos()

unix2dos(file)

os.unix()

long2taf(x)

period(x, y = NULL)

taf.boot.path(..., fsep = .Platform$file.sep)

zoom(x, ...)

draft.software(package, author = NULL, year = NULL, title = NULL,
  version = NULL, source = NULL, file = "", append = FALSE)

stamp.description(targz, spec, sha.full)

sourceTAF(script, rm = FALSE, clean = TRUE, detach = FALSE, taf = NULL,
  quiet = FALSE)

long2xtab(x)

taf.session(sort = FALSE, details = FALSE)

mkdir(path)

write.taf(x, file = NULL, dir = NULL, quote = FALSE, row.names = FALSE,
  fileEncoding = "UTF-8", underscore = TRUE, ...)

parse.repo(repo)

draft.data(originator = NULL, year = format(Sys.time(), "\%Y"),
  title = NULL, period = NULL, access = "Public", source = NULL,
  file = "", append = FALSE, data.files = dir("bootstrap/initial/data"),
  data.scripts = dir("bootstrap", pattern = "\\\\.R$"))

sourceDir(dir, pattern = "\\\\.[r|R]$", all.files = FALSE,
  recursive = FALSE, quiet = TRUE, ...)

already.in.taf.library(targz, lib)

make(recipe, prereq, target, include = TRUE, engine = source,
  debug = FALSE, force = FALSE, recon = FALSE, ...)

read.bib(file)

tafpng(...)

taf.png(filename, width = 1600, height = 1200, res = 200, ...)

makeAll(...)

rnd(x, cols, digits = 0, grep = FALSE, ...)

ds.package(package, author, year, title, version, source)

flr2taf(x, colname = "Value")

download(url, dir = ".", mode = "wb", chmod = file_ext(url) == "",
  destfile = file.path(dir, basename(url)), quiet = TRUE, ...)

sam2taf(x, colname = NULL, year = TRUE)

xtab2long(x, names = c("Year", "Age", "Value"))

line.endings(file)

taf.data.path(..., fsep = .Platform$file.sep)

latin1.to.utf8(file, force = FALSE)

get.remote.sha(owner, repo, ref, seven = TRUE)

rmdir(path, recursive = FALSE)

extract.subdir(targz, subtargz, subdir)

file.encoding(file)

os.windows()

dos2unix(file)

taf.libPaths(remove = FALSE)

taf2long(x, names = c("Year", "Age", "Value"))

clean.data(folder = "bootstrap/data", quiet = FALSE, force = FALSE)

clean(dirs = c("data", "model", "output", "report"), force = FALSE)

\method{zoom}{trellis}(x, size = 1, main = 1.2 * size, lab = size,
  axis = size, strip = size, sub = 0.9 * size, legend = 0.9 * size,
  splom = 0.9 * size, ...)

os()

deps(path = ".", base = FALSE, installed = TRUE, available = TRUE,
  list = FALSE)

taf.install(targz = NULL, lib = "bootstrap/library", quiet = FALSE)

download.github(repo, dir = ".", quiet = FALSE)

lim(x, mult = 1.1)

div(x, cols, by = 1000, grep = FALSE, ...)

taf2xtab(x)

convert.spaces(file, sep = "_")

msg(...)

detach.packages(quiet = FALSE)

cp(from, to, move = FALSE, ignore = FALSE, overwrite = TRUE,
  quiet = TRUE)

taf.library(package, messages = FALSE, warnings = FALSE)

utf8.to.latin1(file, force = FALSE)

ds.file(package, author, year, title, version, source)

makeTAF(script, ...)
}
\description{
These functions are re-exported from the TAF package.
}
\details{
Follow the links below to see the documentation.
[TAF::tt], [TAF::taf.unzip], [TAF::taf.skeleton], [TAF::os.linux], [TAF::sourceAll], [TAF::clean.library], [TAF::process.entry], [TAF::is.r.package], [TAF::xtab2taf], [TAF::read.taf], [TAF::taf.sources], [TAF::plus], [TAF::taf.bootstrap], [TAF::clean.software], [TAF::process.bibfile], [TAF::os.macos], [TAF::unix2dos], [TAF::os.unix], [TAF::long2taf], [TAF::period], [TAF::taf.boot.path], [TAF::zoom], [TAF::draft.software], [TAF::stamp.description], [TAF::sourceTAF], [TAF::long2xtab], [TAF::taf.session], [TAF::mkdir], [TAF::write.taf], [TAF::parse.repo], [TAF::draft.data], [TAF::sourceDir], [TAF::already.in.taf.library], [TAF::make], [TAF::read.bib], [TAF::tafpng], [TAF::taf.png], [TAF::makeAll], [TAF::rnd], [TAF::ds.package], [TAF::flr2taf], [TAF::download], [TAF::sam2taf], [TAF::xtab2long], [TAF::line.endings], [TAF::taf.data.path], [TAF::latin1.to.utf8], [TAF::get.remote.sha], [TAF::rmdir], [TAF::extract.subdir], [TAF::file.encoding], [TAF::os.windows], [TAF::dos2unix], [TAF::taf.libPaths], [TAF::taf2long], [TAF::clean.data], [TAF::clean], [TAF::zoom.trellis], [TAF::os], [TAF::deps], [TAF::taf.install], [TAF::download.github], [TAF::lim], [TAF::div], [TAF::taf2xtab], [TAF::convert.spaces], [TAF::msg], [TAF::detach.packages], [TAF::cp], [TAF::taf.library], [TAF::utf8.to.latin1], [TAF::ds.file], [TAF::makeTAF]
}
\keyword{internal}
